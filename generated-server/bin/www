#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('generated-server:server');
var http = require('http');
const { Server } = require('socket.io');
const { PeerServer } = require('peer');
const { fetchData, fetchPeersOnConference } = require('./utils');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: 'http://localhost:3000',
    methods: ['GET', 'POST'],
  },
});
const peerServer = new PeerServer({
  port: 9000,
  path: '/',
});

io.on('connection', (socket) => {
  console.log('new user connected: ', socket.id);
  const data = fetchData(io);
  io.emit('receiveData', data);

  socket.on('sendMessage', (msg, to) => {
    const from = socket.id;
    console.log('message from: ', from);
    socket.broadcast.to(to).emit('receiveMessage', msg, from);
  });

  socket.on('joinRoom', (room) => {
    socket.join(room);
    const data = fetchData(io);
    io.emit('receiveData', data);
    socket.broadcast.to(room).emit('joinRoomAlert', socket.id, room);
  });

  socket.on('leaveRoom', (room) => {
    socket.leave(room);
    const data = fetchData(io);
    io.emit('receiveData', data);
    socket.broadcast.to(room).emit('leaveRoomAlert', socket.id, room);
  });

  socket.on('fetchData', () => {
    const data = fetchData(io);
    socket.emit('receiveData', data);
  });

  socket.on('callOthersTriggered', (room) => {
    const peersOnConference = fetchPeersOnConference(io, room);
    io.to(room).emit('receiveCallOthersTriggered', peersOnConference, room);
  });

  socket.on('leaveCall', (room, socketId) => {
    console.log(socketId);
    socket.broadcast.to(room).emit('leaveCallAlert', socket.id, room);
  });

  socket.on('forceDisconnect', () => {
    socket.disconnect(true);
  });

  socket.on('disconnect', () => {
    const data = fetchData(io);
    io.emit('receiveData', data);
    console.log('user has left from server', socket.id);
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
